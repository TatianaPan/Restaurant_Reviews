server {
  listen 80;
  listen [::]:80;
  return 301 https://$server_name$request_uri;
 server_name andromeda.propulsion-learn.ch;

    location /app {
      resolver 127.0.0.11;    # DNS of docker if nginx is not on the same docker-compose network
      set $target http://app:8080;
        proxy_pass $target;     # Docket will check the docker-compose config to find 'app' and its port
    }   location / {
      root /luna/build;
      try_files $uri $uri/ index.html;
    }
}
#
#

//server {
//  listen 443 ssl http2;
//  listen [::]:443 ssl http2;
//  server_name andromeda.propulsion-learn.ch;
//  ssl_certificate /etc/letsencrypt/live/andromeda.propulsion-learn.ch/fullchain.pem;
//  ssl_certificate_key /etc/letsencrypt/live/andromeda.propulsion-learn.ch/privkey.pem;
//  # from https://cipherli.st/
//  # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
//    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
//    ssl_prefer_server_ciphers on;
//    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
//    ssl_ecdh_curve secp384r1;
//    ssl_session_cache shared:SSL:10m;
//    ssl_session_tickets off;
//    ssl_stapling on;
//    ssl_stapling_verify on;
//    resolver 8.8.8.8 8.8.4.4 valid=300s;
//    resolver_timeout 5s;
//
//
//  # Disable preloading HSTS for now.  You can use the commented out header line that includes
//  # the "preload" directive if you understand the implications.
//  #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
//  add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
//  add_header X-Frame-Options SAMEORIGIN;  # must not be on DENY to make iframe work!
//  add_header X-Content-Type-Options nosniff;
//
//  location /static/ {
//    alias   /static/;
//  }
//
//  location /media/ {
//    alias   /media/;
//  }
//
//  location / {
//
//    if ($request_method = 'OPTIONS') {
//
//        add_header 'Access-Control-Allow-Origin' '*';
//
//        add_header 'Access-Control-Allow-Credentials' 'true';
//        add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, DELETE, OPTIONS';
//
//        add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
//
//        add_header 'Access-Control-Max-Age' 1728000;
//        add_header 'Content-Type' 'text/plain charset=UTF-8';
//        add_header 'Content-Length' 0;
//
//        return 204;
//     }
//
//    add_header 'Access-Control-Allow-Origin' $http_origin always;
//    add_header 'Access-Control-Allow-Credentials' 'true' always;
//    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
//    add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
//
//
//    resolver 127.0.0.11;    # DNS of docker if nginx is not on the same docker-compose network
//    set $target http://app:8000;
//    proxy_pass $target;     # Docket will check the docker-compose config to find 'app' and its port
//
//    proxy_set_header Host $http_host;
//    proxy_set_header X-Real-IP $remote_addr;
//    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
//  }
}

==================================================================================================================================================================================================================


  location /app {
    resolver 127.0.0.11;    # DNS of docker if nginx is not on the same docker-compose network
    set $target http://app:8080;
      proxy_pass $target;     # Docket will check the docker-compose config to find 'app' and its port
  }
  location / {
    root /var/www/frontend;
    try_files $uri $uri/ /index.html;

==================================================================================================================================================================================================================


server {
  listen 80;
  listen [::]:80;
  server_name andromeda.propulsion-learn.ch;
  return 301 https://$server_name$request_uri;
  }
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name andromeda.propulsion-learn.ch;
    ssl_certificate /etc/letsencrypt/live/andromeda.propulsion-learn.ch/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/andromeda.propulsion-learn.ch/privkey.pem;
    # from https://cipherli.st/
    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared: SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid = 300s;
    resolver_timeout 5s;


    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options SAMEORIGIN;  # must not be on DENY to make iframe work!
    add_header X-Content-Type-Options nosniff;

    location /static-files/ {
      alias   /static-files/;
    }

    location /media-files/ {
      alias   /media-files/;
    }

    location /app {
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Authorization, DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset = UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }

      add_header 'Access-Control-Allow-Origin' $http_origin always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Authorization, DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type';


      resolver 127.0.0.11;    # DNS of docker if nginx is not on the same docker-compose network
      set $target http://app:8000;
        proxy_pass $target;     # Docket will check the docker-compose config to find 'app' and its port

      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


    }
    location / {
      add_header 'Access-Control-Allow-Origin' $http_origin always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Authorization, DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type';

      root /var/www/frontend;
      try_files $uri $uri/ /index.html;

      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


    }
  }
}

==================================================================================================================================================================================================================
copy from oliver
==================================================================================================================================================================================================================

server {
  listen 80;
  listen [::]:80;
  server_name andromeda.propulsion-learn.ch;
  return 301 https://$server_name$request_uri;
}
server {
  # SSL configuration
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name andromeda.propulsion-learn.ch;
  ssl_certificate /etc/letsencrypt/live/andromeda.propulsion-learn.ch/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/andromeda.propulsion-learn.ch/privkey.pem;
  # from https://cipherli.st/
  # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
  ssl_ecdh_curve secp384r1;
  ssl_session_cache shared: SSL:10m;
  ssl_session_tickets off;
  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.8.8 8.8.4.4 valid = 300s;
  resolver_timeout 5s;
  # Disable preloading HSTS for now.  You can use the commented out header line that includes
  # the "preload" directive if you understand the implications.
  #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
  add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
  add_header X-Frame-Options SAMEORIGIN;  # must not be on DENY to make iframe work!
  add_header X-Content-Type-Options nosniff;
  location / {
    # everything is passed to Gunicorn
    root /var/www/frontend;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_cache_bypass $http_upgrade;
  }
  location /static-files/ {
    alias   /static-files/;
  }
  location /media-files/ {
    alias   /media-files/;
  }
}

==================================================================================================================================================================================================================
